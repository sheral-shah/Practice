//The While condition -
//while (<Boolean Condition>) {}--if the condition is true the loop keeps running and if false we exit the loop
//Example
size (300, 300);
int x=0;

while(x<width) {
line (x,0,x,height);
x=x+20
}

//Example
float number=100;
int count=0;

while (number>=1) {
number=number/2.0;
count=count+1
}
text (count,45,45);

//
size(200,200) ;
int p=225 ;
int q=225;

for (int x=0; x<200; x=x+10) {
    for (int y=0; y<200; y=y+10) {
          fill (x*p/width,y*q/height,10) ;
        rect (x,y,10,10);
         
}
}


//THE BEGIN SHAPE FUNCTION: beginShape(), endShape ()--can use end(CLOSE) to have a closed shape
//Even in begin shape bracket can add paramters such as LINE, TRIANGLES, TRIANGLE_STRIP, QUADS, QUAD_STRIP
//To draw a shape first create vertices through the vertex function : vertex()--in the bracket fille the coordinates
//AN EXAMPE


size (200,200);
background(140,40,40);
stroke(0);
strokeWeight(3);
fill(255);

beginShape();
vertex(90,40);
vertex(70,120);
vertex(110,120);
endShape(CLOSE);

//
size (200,200);
background(140,40,40);
stroke(0);
strokeWeight(3);
fill(255);


beginShape();
vertex(40,70);
vertex(40,120);
vertex (60,125);
vertex (80,120);
vertex(80,70);
fill (0,255,0)
endShape(CLOSE);
//

//CAN DRAW CURVES AS WELL
//https://github.com/processing-js/processing-js, https://github.com/processing-js/processing-js
size (200,200);
background(140,40,40);
stroke(0);
strokeWeight(3);
fill(255);
beginShape();
curveVertex(500,500); //this is the curveature/control for beggining of the curve
curveVertex(30,70); //This is the start point
curveVertex(200,100) //This is the curveature/control for end of the curve
endShape(CLOSE);

//BEZIER CURVE--Identify to vertices for the start and end and a control vertice that reprsents the curvature
size (200,200);
background(140,40,40);
stroke(0);
strokeWeight(3);
fill(255);
beginShape();
vertex(40,40); //starting point
bezierVertex(30,70, 40,70,50,60); ///curvatures and ending point
endShape(CLOSE);

//The Rotate function ; rotate (angle in radians)
//Translate(xoffset,yoffset)--so that after rotate we can change frpm where we want to draw
//Scale up images using scale function: scale ( x scale, y scale); give this in decimals. 1.5 would mean 150 percent
//
size (300,300);

rect(85,10,30,45);
rotate(PI/16);
translate(65,65);
rect(85,10,30,45);
rotate(PI/16);
rect(85,10,30,45);
rotate(PI/16);
rect(85,10,30,45);
rotate(PI/16);
rect(85,10,30,45);
rotate(PI/16);
//there is another function called textAlign

//AN EXAMPLE
size (400,400);
int x=10;
int grid=width/x;

for (int i=0; i<=x; i++) {
    for (int j=0; j<=x-i; j++){
        ellipse ((i*grid+grid/2), (grid/2+i*grid/2+j*grid), grid, grid )
    }
}

//DE-BUGGING--test cases--hand tracing --talk through code--

// An Array is a data structure where we can store a collection of elements which have the same data type. There is a static array in which the number of values i can contain is fixed.
//There is a variable sized array in which the number of values it can store is not fixed. 
//Data structures help us organise data by how the data is stored, how it is accessed and how it can be changed.

//
String name="Frank";
int nameLength=name.length(); //number of characters in the name
text (nameLength, 40, 40);
char letter=name.charAt(1); //the character at the number enclosed in bracket. 1 actually means 2 here. To display "F" bracket can be left empty
text (letter,40,60);
//

//How to refer to an array? String[] i={------}
// if within this array you want to access the first word you write--i[0], second word i[1], etc.

//An example of the number of times a word repeats
size (100,100);

String[] words={"Here", "we", "have", "a", "simple", "program", "that", "displays", "the", "number",
                "of", "times", "the", "word", "data", "appears"};
  int count=0;
  
  for (int i=0; i<=words.length; i++) {
  if (words[i]=="data") {
  count=count+1;
  }
  }
  fill (0);
  text(count, 10,20);

//
size (500,500);

String[] words={"Here", "we", "have", "a", "simple", 
       "program", "that", "displays", "the", "number",
                "of", "times", "the", "word", "data", 
                "appears", "in", "this", "small", 
               "part", "of", "this", "video", "new", "newest"};
               
 String[] newWords = new String [23];
  
  for (int i=0; i<=words.length; i++) {
  newWords[i]= words [words.length-1-i];
 text(newWords[i], 10,20*(i+1));
  }
  
  //
  lentgh of the first array to set the size of new one: String[] words={}
                                                        String[] newwords= new String[words.length]
                                                        
/////////////////A GRAPH USING ARRAYS/////////////////
  size(760,700);

int hscale=height/380;
int vscale=width/50;

strokeWeight (3);
line(20, vscale, 20, height-20);
line(20, height-20, width-hscale, height-20);

fill(0);

for(int i = 0; i < 60; i = i+5){
    text(i, 2, height - 20 - (i*vscale));
}

String[] month={"JAN", "FEB", "MAR", "APR", "MAY",
                "JUN", "JUL", "AUG", "SEP", "OCT",
                "NOV", "DEC"} ;

for (int j=0; j<=month.length; j++) {
    text (month[j], 40+j*63, height-5 )
}

float[] temps = {35.0, 26.6, 29.3, 31.8, 30.2, 29.7, 30.9, 
      31.1, 34.8, 37.6, 37.9, 39.8, 35.1, 23.7, 25.7, 30.1, 
      36.6, 38.5, 35.9, 34.3, 36.7, 29.9, 25.9, 28.5, 30.0, 
      33.3, 33.1, 25.9, 19.5, 24.2, 25.3, 33.1, 24.8, 22.9, 
      24.1, 29.5, 33.1, 31.3, 29.5, 34.8, 34.7, 32.2, 33.9, 
      29.3, 24.8, 24.3, 24.4, 26.0, 27.5, 24.5, 25.9, 37.0, 
      39.5, 37.0, 27.7, 26.2, 24.9, 25.4, 29.7, 31.4, 33.3, 
      34.8, 33.6, 33.2, 38.7, 38.0, 30.7, 37.1, 30.3, 29.0, 
      31.4, 30.8, 32.2, 26.7, 30.2, 33.3, 35.4, 21.0, 21.7, 
      23.6, 24.5, 30.3, 25.3, 27.7, 23.4, 21.4, 21.7, 22.7, 
      21.7, 20.3, 23.9, 28.7, 23.8, 23.3, 27.6, 28.2, 20.1, 
      19.9, 20.5, 22.4, 22.6, 22.6, 24.0, 24.1, 27.0, 29.1, 
      21.4, 21.6, 25.6, 30.1, 29.7, 23.5, 20.2, 20.3, 25.3, 
      28.1, 30.1, 27.6, 26.9, 24.2, 26.3, 18.3, 19.8, 19.6, 
      18.5, 24.5, 25.0, 24.3, 19.7, 18.1, 18.3, 19.0, 18.7, 
      21.4, 23.1, 21.0, 22.4, 19.8, 20.1, 18.5, 18.9, 24.3, 
      23.2, 19.0, 21.0, 14.5, 17.0, 16.3, 17.0, 16.3, 17.8, 
      18.2, 20.0, 19.0, 17.9, 16.7, 15.8, 15.9, 17.0, 18.0, 
      15.7, 16.2, 16.1, 15.4, 14.7, 20.8, 20.3, 16.0, 17.1, 
      15.4, 15.1, 15.0, 16.2, 16.5, 12.6, 12.8, 13.6, 14.3, 
      15.4, 16.2, 13.2, 14.4, 14.2, 15.7, 15.8, 11.5, 14.0, 
      14.5, 14.7, 14.4, 14.4, 15.9, 15.8, 11.0, 13.8, 13.7, 
      14.3, 16.1, 16.9, 19.9, 20.2, 18.5, 22.7, 15.7, 13.9, 
      13.1, 12.7, 11.8, 14.1, 14.2, 16.1, 17.4, 16.8, 13.9, 
      14.9, 15.2, 12.6, 14.7, 17.2, 19.5, 22.0, 18.7, 15.0, 
      16.0, 18.0, 15.8, 17.0, 20.8, 22.6, 21.8, 24.7, 14.3, 
      15.6, 17.2, 17.6, 16.7, 16.6, 15.5, 14.2, 18.4, 21.8, 
      22.4, 19.9, 16.8, 19.4, 18.8, 15.7, 17.1, 20.1, 22.6, 
      25.0, 20.1, 16.7, 15.6, 19.0, 12.9, 13.7, 11.9, 15.4, 
      19.0, 20.9, 13.8, 16.4, 18.4, 14.0, 15.5, 20.8, 16.6, 
      17.0, 17.6, 18.3, 19.9, 15.8, 15.6, 21.8, 20.7, 15.0, 
      16.4, 20.6, 28.8, 24.0, 26.1, 26.4, 16.5, 16.8, 17.2, 
      19.6, 25.5, 28.3, 15.4, 16.2, 15.4, 20.0, 30.8, 16.5, 
      15.8, 17.6, 23.1, 27.8, 19.0, 20.8, 22.1, 30.0, 18.2, 
      18.4, 18.8, 19.5, 25.3, 28.2, 19.3, 25.1, 26.2, 19.3, 
      23.1, 25.1, 32.0, 20.2, 17.1, 18.5, 19.5, 29.4, 35.2, 
      25.9, 29.3, 36.1, 32.0, 17.8, 21.2, 21.0, 23.2, 24.8, 
      27.9, 29.5, 27.3, 23.4, 24.1, 24.9, 32.2, 29.0, 22.7, 
      23.6, 31.3, 20.7, 21.5, 26.0, 31.2, 36.9, 35.6, 24.4, 
      23.3, 27.6, 21.7, 27.4, 37.1, 22.8, 26.9, 32.9, 38.3, 
      36.2, 41.3, 28.4, 29.9, 30.1, 30.8, 24.3, 25.3};
      
stroke(255, 0, 0);
strokeWeight(1);
noFill();
beginShape();
for(int i = 0; i < temps.length; i++){
    vertex(25+i*2, height+50 - (vscale*temps[i]));
}
endShape();
/////////////////////////////////////////////////////////

//Already decide the size of an array: int length=5 ; int[] array=new int[length];----cant be changed once set.

//DYNAMIC ARRAYS
// Array list--
//ArrayList<> array=new; ArrayList ();--created an empty array list to which elements can be added one at a time
//array.add (..);

// To create a avriable sized array to hold integers we write : ArrayList<Integer>array=new ArrayList<Integer>();
//array.add(0,3);--means that in the array list number 3 will be added in the first positon
//array.add(1,4); means that in the array list number 4 will be added in the second position.
// array.remove(1); means the number in the second positon i.e. 4 will be deleted from the array list
//array.get(0); will give us the value which is first in the array list which is 3.
//text(array.get(0), 100, 100)
//to change the positions we write array.set(1,3);--so 3 will become second position in place of 4.
//.. To get the number of elements in the list--array.size(), text(array.size(), 100, 100);

//
size (500,500);

String[] words={"Here", "we", "have", "a", "simple", 
       "program", "that", "displays", "the", "number",
                "of", "times", "the", "word", "data", 
                "appears", "in", "this", "small", 
               "part", "of", "this", "video", "new", "newest"};
               
 ArrayList<String> unique= new ArrayList<String> ();
  
  for (int i=0; i<=words.length; i++) {
  if (!unique.contains(words[i])) {
  unique.add(words[i]);
  }
  }
 
 text(unique.size(), 10,20);
  }
  
  //

//An Example
ArrayList<Float> temps;
float temp;

void setup(){
  // Initialise variables and canvas 
  temps = new ArrayList<Float>();
  temp = 0.0;
  size(620, 420);
}

void draw(){
  
  // reset canvas
  background(255);
  fill(0);
  stroke(0, 0, 0);
  strokeWeight(3);
  
  // draw axes
  line(20, 0, 20, height-20);
  line(20, height-20, width, height-20);
  
  // label vertical axis
  int vscale = (height-20)/50;
  for (int i=0; i<50; i=i+5){
    text(i,2,height-20-(i*vscale));
  }
  
  // write text prompt
  if(temp!=0){
    text("Next temperature to add: "+temp+". Press SPACE to add, or type more digits/backspace.",30,20);
    if (temps.size()<=0){
      return;
    }
  } else if (temps.size()>0) {
    text(temps.get(temps.size()-1)+" added! Add more values when ready.",30,20);
  } else {
    text("Ready to add temperatures. Click on this graph and type a number to begin.",30,20);
    return;
  }
  
  // set scale
  int hscale = (width-20)/temps.size();
  
  // setup graph line
  stroke(255, 0, 0);
  strokeWeight(1);
  noFill();
  beginShape();
  
  // add points
  for (int i=0; i<temps.size(); i++) {
    vertex(i*hscale+20, height-(vscale*temps.get(i)+20));
  }
  
  // finish line
  endShape();

}

void keyPressed(){
  // handle keyboard input
  if(key == ' '){
    temps.add(temp);
    temp = 0;
  } else if(keyCode == BACKSPACE) {
    temp = (temp-temp%10)/10;
  } else if(key == '1'){
    temp = temp*10;
    temp = temp+1;
  } else if(key == '2'){
    temp = temp*10;
    temp = temp+2;
  } else if(key == '3'){
    temp = temp*10;
    temp = temp+3;
  } else if(key == '4'){
    temp = temp*10;
    temp = temp+4;
  } else if(key == '5'){
    temp = temp*10;
    temp = temp+5;
  } else if(key == '6'){
    temp = temp*10;
    temp = temp+6;
  } else if(key == '7'){
    temp = temp*10;
    temp = temp+7;
  } else if(key == '8'){
    temp = temp*10;
    temp = temp+8;
  } else if(key == '9'){
    temp = temp*10;
    temp = temp+9;
  } else if(key == '0'){
    temp = temp*10;
  }
  
  // An Example
  size(760, 400);
fill(0);
background(255);

ArrayList <Float> temps = new ArrayList <Float>();
int TEMPS_TO_GEN = 200;

for(int i = 0; i < TEMPS_TO_GEN; i++){
  temps.add(random(10, 40));
}

String[] months = {"JAN", "FEB", "MAR", "APR", "MAY",
                "JUN", "JUL", "AUG", "SEP", "OCT",
                "NOV", "DEC"};
                
float hscale = (width-20.0)/temps.size();
float vscale = (height-20.0)/50.0;

//Draw axes
strokeWeight(3);
stroke(0);
line(20, vscale, 20, height-20);
line(20, height-20, width-hscale, height-20);

//Horizontal labels (months)
for(int i = 0; i < months.length; i++){
    text(months[i], i*30*hscale + 15*hscale + 20, height-5);
}

//Vertical labels (temperature 0-45)
for(int i = 0; i < 50; i = i+5){
    text(i, 2, height - 20 - (i*vscale));
}

//Draw temperature data
stroke(255, 0, 0);
strokeWeight(1);
noFill();
beginShape();
for(int i = 0; i < temps.size(); i++){
    vertex(((i+1)*hscale)+20, height - 10 - (vscale*temps.get(i)));
}
endShape();
//
